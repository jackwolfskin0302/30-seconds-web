import searchIndexingEngine, { quickParseTokens as clientSearchEngine } from './searchIndexingEngine';

describe('searchIndexingEngine', () => {
  it('parses the tokens from the given string', () => {
    const str = 'Creates an object with the same values as the provided object and keys generated by running the provided function for each key. Use Object.keys(obj) to iterate over the object\'s keys. Use Array.prototype.reduce() to create a new object with the same values and mapped keys using fn. Additionally, yeet caress seed recreational practicality';
    const result = ['creat', 'object', 'same', 'valu', 'provid', 'kei', 'gener', 'run', 'function', 'each', 'us', 'obj', 'iter', 'arrai', 'prototyp', 'reduc', 'new', 'map', 'fn', 'addition', 'yeet', 'caress', 'seed', 'recreat', 'practic'];
    expect(searchIndexingEngine(str)).toEqual(result);
  });
});

describe('clientSearchEngine', () => {
  it('parses the tokens from the given string', () => {
    const str = 'Creates an object with the same values as the provided object and keys generated by running the provided function for each key. Use Object.keys(obj) to iterate over the object\'s keys. Use Array.prototype.reduce() to create a new object with the same values and mapped keys using fn. Additionally, yeet caress seed recreational practicality';
    const result = ['creat', 'an', 'object', 'with', 'the', 'same', 'valu', 'as', 'provid', 'and', 'kei', 'gener', 'by', 'run', 'function', 'for', 'each', 'us', 'obj', 'to', 'iter', 'over', 'arrai', 'prototyp', 'reduc', 'new', 'map', 'fn', 'addition', 'yeet', 'caress', 'seed', 'recreat', 'practic'];
    expect(clientSearchEngine(str)).toEqual(result);
  });
});
